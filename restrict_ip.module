<?php

/**
 * Implementation of hook_menu()
 */
function restrict_ip_menu()
{
	$menu['admin/config/people/restrict_ip'] = array
	(
		'title' => 'IP Address Whitelist',
		'description' => 'Set the list of IP addresses that will be allowed to access the site',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('restrict_ip_settings'),
		'access arguments' => array('Administer Restricted IP addresses'),
		'file' => 'includes/restrict_ip.pages.inc',
	);
	$menu['restrict_ip/access_denied'] = array
	(
		'title' => 'Access Denied',
		'page callback' => 'restrict_ip_access_denied_page',
		'access callback' => TRUE,
		'file' => 'includes/restrict_ip.pages.inc',
		'type' => MENU_CALLBACK,
	);
	return $menu;
}

/**
 * Implementation of hook_permission()
 */
function restrict_ip_permission()
{
	$permissions = array
	(
		'Administer Restricted IP addresses' => array
		(
			'title' => 'Administer Restricted IP addresses',
			'description' => 'Allows the user to set admitted IP addresses',
		),
	);

	if(variable_get('restrict_ip_allow_role_bypass'))
	{
		$permissions['Bypass IP Restriction'] = array
		(
			'title' => 'Bypass IP Restriction',
			'description' => 'Allows the user to access the site even if not in the IP whitelist',
		);
	}

	return $permissions;
}

/**
 * Function used to set or determine if the user's ip address is not whitelisted
 */
function ip_restricted($block = FALSE)
{
	$blocked = &drupal_static(__function__);
	if(is_null($blocked))
	{
		$blocked = FALSE;
	}

	// We do this check as block will only be set
	// when the user is in hook_boot(). If we were
	// to run the code in the else{} block during
	// hook_boot(), we'd get an error as user_access()
	// is not yet available.
	if($block)
	{
		$blocked = TRUE;
	}
	else
	{
		if($blocked)
		{
			if(variable_get('restrict_ip_allow_role_bypass', FALSE))
			{
				if(user_access('Bypass IP Restriction') || in_array(current_path(), array('user', 'user/login', 'user/password', 'user/logout')) || strpos(current_path(), 'user/reset/') === 0)
				{
					return FALSE;
				}
			}
		}

		return $blocked;
	}
}

/**
 * Implementation of hook_boot()
 *
 * This function determines whether or not the user should be
 * whitelisted, and if they should, it sets a flag indicating so
 */
function restrict_ip_boot()
{
	global $user;

	$ip_addresses = trim(variable_get('restrict_ip_address_list', ''));
	// We only need to check IP addresses if at least one IP has been set to be whitelisted.
	if(strlen($ip_addresses))
	{
		$ip_addresses = explode(PHP_EOL, $ip_addresses);
		$user_ip = ip_address();
		$access_denied = TRUE;
		foreach($ip_addresses as $ip_address)
		{
			// Check if the given IP address matches the current user
			if(trim($ip_address) == $user_ip)
			{
				// The given IP is allowed - so we don't deny access (aka we allow it)
				$access_denied = FALSE;
				// No need to continue as user is allowed
				break;
			}

			$pieces = explode('-', trim($ip_address));
			// We only need to continue checking this IP address
			// if it is a range of addresses
			if(count($pieces) == 2)
			{
				$start_ip = $pieces[0];
				$end_ip = $pieces[1];
				$start_pieces = explode('.', $start_ip);
				// If there are not 4 sections to the IP then its an invalid
				// IPv4 address, and we don't need to continue checking
				if(count($start_pieces) === 4)
				{
					$user_pieces = explode('.', $user_ip);
					$continue = TRUE;
					// We compare the first three chunks of the first IP address
					// With the first three chunks of the user's IP address
					// If they are not the same, then the IP address is not within
					// the range of IPs
					for($i = 0; $i < 3; $i++)
					{
						if((int) $user_pieces[$i] !== (int) $start_pieces[$i])
						{
							// One of the chunks has failed, so we can stop
							// checking this range
							$continue = FALSE;
							break;
						}
					}
					// The first three chunks have past testing, so now we check the
					// range given to see if the final chunk is in this range
					if($continue)
					{
						// First we get the start of the range
						$start_final_chunk = (int) array_pop($start_pieces);
						$end_pieces = explode('.', $end_ip);
						// Then we get the end of the range. This will work
						// whether the user has entered XXX.XXX.XXX.XXX - XXX.XXX.XXX.XXX
						// or XXX.XXX.XXX.XXX-XXX
						$end_final_chunk = (int) array_pop($end_pieces);
						// Now we get the user's final chunk
						$user_final_chunk = (int) array_pop($user_pieces);
						// And finally we check to see if the user's chunk lies in that range
						if($user_final_chunk >= $start_final_chunk && $user_final_chunk <= $end_final_chunk)
						{
							// The user's IP lies in the range, so we don't deny access (ie - we grant it)
							$access_denied = FALSE;
							// No need to cintinue checking addresses as the user has been granted
							break;
						}
					}
				}
			}
		}

		// The user has been denied access, so we need to set this value as so.
		if($access_denied)
		{
			ip_restricted(TRUE);
		}
	}
}

/**
 * Implementation of hook_block_view_MODULE_DELTA_alter()
 *
 * This function adds a key that is used to identify the main
 * content block, so that it is not unset in hook_block_view_alter()
 */
function restrict_ip_block_view_system_main_alter(&$vars)
{
	$vars['block_id'] = 'system-main';
}

/**
 * Implementation of hook_block_view_alter()
 *
 * This function unsets all blocks except the main
 * content block for users who are not whitelisted
 */
function restrict_ip_block_view_alter(&$vars)
{
	if(!ip_restricted())
	{
		if(!isset($vars['block_id']) || $vars['block_id'] != 'system-main')
		{
			$vars['#access'] = FALSE;
		}
	}
}

/**
 * Implementation of hook_page_alter()
 *
 * This function redirects non-whitelisted users
 * to the access denied page, and unsets all
 * regions of the page, except for the content
 * regions, which shows the blacklisted error
 * to users.
 */
function restrict_ip_page_alter(&$page)
{
	global $theme;

	if(ip_restricted())
	{
		if(current_path() != 'restrict_ip/access_denied')
		{
			drupal_goto('restrict_ip/access_denied');
		}

		$regions = system_region_list($theme, REGIONS_ALL);
		unset($regions['content']);

		$whitelisted_regions = array();
		foreach(module_implements('restrict_ip_whitelisted_regions') as $module_name)
		{
			$function = $module_name . '_restrict_ip_whitelisted_regions';
			$whitelisted_regions = array_merge($whitelisted_regions, $function());
		}
		foreach($whitelisted_regions as $wr)
		{
			unset($regions[$wr]);
		}

		foreach(array_keys($regions) as $region)
		{
			if(isset($page[$region]))
			{
				$page[$region] = FALSE;
			}
		}
	}
}

/**
 * Override of template_preprocess_page()
 *
 * This function unsets tabs and various
 * other page elements for blocked users
 * so they are not rendered
 */
function restrict_ip_preprocess_page(&$page)
{
	if(ip_restricted())
	{
		if(isset($page['tabs']))
		{
			if(isset($page['tabs']['#primary']))
			{
				$page['tabs']['#primary'] = array();
			}
			if(isset($page['tabs']['#secondary']))
			{
				$page['tabs']['#primary'] = array();
			}
		}
		$page['title_prefix'] = array();
		$page['title_suffix'] = array();
		$page['main_menu'] = array();
		$page['secondary_menu'] = array();
		$page['action_links'] = array();
	}
}

/**
 * Override of template_preprocess_html()
 *
 * This function unsets $page_top and $page_bottom
 * so that they are not passed to html.tpl.php,
 * preventing these regions from being rendered
 */
function restrict_ip_preprocess_html(&$items)
{
	if(ip_restricted())
	{
		if(isset($items['page']['page_top']))
		{
			$items['page']['page_top'] = FALSE;
		}
		if(isset($items['page']['page_top']))
		{
			$items['page']['page_bottom'] = FALSE;
		}
	}
}

/**
 * Implementation of hook_js_alter()
 *
 * This function removes all javascript from the page
 * with the exception of jquery.js and the javascript
 * file provided with the module
 */
function restrict_ip_js_alter(&$javascript)
{
	if(ip_restricted())
	{
		$whitelisted_keys = array
		(
			'misc/jquery.js',
			drupal_get_path('module', 'restrict_ip') . '/js/restrict_ip.js',
		);
		foreach(module_implements('restrict_ip_whitelisted_js_keys') as $module_name)
		{
			$function = $module_name . '_restrict_ip_whitelisted_js_keys';
			$whitelisted_keys = array_merge($whitelisted_keys, $function());
		}

		foreach(array_keys($javascript) as $key)
		{
			if(!in_array($key, $whitelisted_keys))
			{
				unset($javascript[$key]);
			}
		}
	}
}

/**
 * Override of template_preprocess_breadcrumb()
 *
 * Unsets the breadcrumb if the user has not been whitelisted
 */
function restrict_ip_preprocess_breadcrumb(&$vars)
{
	if(ip_restricted())
	{
		$vars['breadcrumb'] = array();
	}
}
